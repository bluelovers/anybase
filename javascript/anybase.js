// Generated by CoffeeScript 1.9.3
(function() {
  var AnybaseDigits, anybase, defaultMap, i,
    slice = [].slice;

  defaultMap = (function() {
    var j, k, l, len1, m, ref, results, results1, results2, results3;
    ref = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57].concat((function() {
      results1 = [];
      for (k = 97; k <= 122; k++){ results1.push(k); }
      return results1;
    }).apply(this), (function() {
      results2 = [];
      for (l = 65; l <= 90; l++){ results2.push(l); }
      return results2;
    }).apply(this), (function() {
      results3 = [];
      for (m = 945; m <= 969; m++){ results3.push(m); }
      return results3;
    }).apply(this));
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      i = ref[j];
      results.push(String.fromCharCode(i));
    }
    return results;
  })();

  AnybaseDigits = (function() {
    function AnybaseDigits(base, number, charmap1) {
      this.base = base;
      this.charmap = charmap1;
      this._checkBase();
      this._checkNumber(number);
      this._checkFraction();
      this._checkCharmap();
    }

    AnybaseDigits.prototype._checkBase = function() {
      if (!(typeof this.base === 'number' && this.base > 1 && this.base === Math.floor(this.base))) {
        throw new Error('`base` must be an integer >= 2');
      }
    };

    AnybaseDigits.prototype._checkCharmap = function() {
      var char, digit, j, k, l, len1, len2, len3, ref, ref1, ref2, ref3;
      if (this.charmap) {
        if (!(((ref = this.charmap) != null ? ref.length : void 0) >= this.base)) {
          throw new Error('`charmap` must be an array with enough keys for base');
        }
        ref1 = this.charmap;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          char = ref1[j];
          if ((char === '-' || char === '.') || char.length !== 1) {
            throw new Error('`charmap` must not contain \'-\', \'.\' and must ' + 'contain single characters only');
          }
        }
        ref2 = this.digits;
        for (i = k = 0, len2 = ref2.length; k < len2; i = ++k) {
          digit = ref2[i];
          if (typeof digit === 'string') {
            if (-1 === (this.digits[i] = this.charmap.indexOf(digit))) {
              throw new Error('`charmap` does not contain: \'' + digit + '\'');
            }
          } else if (!((this.base > digit && digit >= 0) && (this.digits[i] = Number(digit)) === Math.floor(digit))) {
            throw new Error('invalid digit: \'' + digit + '\'');
          }
        }
      } else {
        ref3 = this.digits;
        for (i = l = 0, len3 = ref3.length; l < len3; i = ++l) {
          digit = ref3[i];
          if (!((this.base > digit && digit >= 0) && (this.digits[i] = Number(digit)) === Math.floor(digit))) {
            throw new Error('invalid digit: \'' + digit + '\'');
          }
        }
      }
    };

    AnybaseDigits.prototype._checkFraction = function() {
      var pos;
      if (this.digits.lastIndexOf('.') !== (pos = this.digits.indexOf('.'))) {
        throw new Error('More then 1 decimal points in `number`');
      }
      if (pos === this.digits.length - 1) {
        return this.digits.pop();
      } else if (pos > -1) {
        this.fraction = this.digits.splice(pos + 1);
        return this.digits.pop();
      }
    };

    AnybaseDigits.prototype._checkNumber = function(number) {
      if (typeof number === 'number') {
        this.digits = String(number).split('');
      } else if (typeof number === 'string') {
        this.digits = number.split('');
      } else if (number.slice) {
        this.digits = number.slice();
      } else {
        throw new Error('`number` must be number a string or an array of digits');
      }
      if (this.negative = this.digits[0] === '-') {
        this.digits.shift();
      }
      while (this.digits[0] === 0) {
        this.digits.shift();
      }
    };

    AnybaseDigits.prototype.add = function(n, pos, multiply) {
      var growth, peek, remainder;
      if (pos == null) {
        pos = this.digits.length - 1;
      }
      growth = 0;
      if (pos === -1) {
        this.digits.unshift(0);
        growth = 1;
        pos = 0;
      }
      peek = multiply ? this.digits[pos] * n : this.digits[pos] + n;
      this.digits[pos] = peek % this.base;
      if (remainder = (peek - this.digits[pos]) / this.base) {
        growth += this.add(remainder, pos - 1);
      }
      return growth;
    };

    AnybaseDigits.prototype.addToFractionPos = function(n, pos) {
      var peek, remainder;
      if (!n) {
        return;
      }
      if (pos === -1) {
        this.add(n);
        return;
      }
      if (this.fraction == null) {
        this.fraction = [];
      }
      while (pos >= this.fraction.length) {
        this.fraction.push(0);
      }
      peek = this.fraction[pos] + n;
      this.fraction[pos] = peek % this.base;
      if (remainder = (peek - this.fraction[pos]) / this.base) {
        this.addToFractionPos(remainder, pos - 1);
      }
    };

    AnybaseDigits.prototype.times = function(n) {
      var growth, len;
      i = 0;
      len = this.digits.length;
      while (i < len) {
        if (growth = this.add(n, i, true)) {
          i += growth;
          len += growth;
        }
        i += 1;
      }
    };

    AnybaseDigits.prototype.compile = function(toBase, precision) {
      var digit, i2, j, k, len1, len2, multi, pow, ref, ref1, res, value;
      if (precision == null) {
        precision = 10;
      }
      res = new AnybaseDigits(toBase, 0, this.charmap);
      res.negative = this.negative;
      ref = this.digits;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        digit = ref[i];
        if (i) {
          res.times(this.base);
        }
        res.add(digit);
      }
      if (this.fraction) {
        res.fraction = [];
        ref1 = this.fraction;
        for (i = k = 0, len2 = ref1.length; k < len2; i = ++k) {
          digit = ref1[i];
          i2 = 0;
          value = digit;
          pow = Math.pow(this.base, i + 1);
          while (!(value === 0 || i2 >= precision)) {
            value = value * toBase;
            multi = Math.floor((value / pow).toPrecision(12));
            value -= pow * multi;
            res.addToFractionPos(multi, i2);
            i2 += 1;
          }
        }
      }
      return res;
    };

    AnybaseDigits.prototype.output = function() {
      var digit, res;
      if (this.fraction) {
        while (this.fraction[this.fraction.length - 1] === 0) {
          this.fraction.pop();
        }
        if (!this.fraction.length) {
          delete this.fraction;
        }
      }
      if (!this.charmap) {
        res = this.negative ? ['-'] : [];
        res.push.apply(res, this.digits);
        if (this.fraction) {
          res.push.apply(res, ['.'].concat(slice.call(this.fraction)));
        }
        return res;
      }
      res = this.negative ? '-' : '';
      res += ((function() {
        var j, len1, ref, results;
        ref = this.digits;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          digit = ref[j];
          results.push(this.charmap[digit]);
        }
        return results;
      }).call(this)).join('');
      if (this.fraction) {
        res += '.' + ((function() {
          var j, len1, ref, results;
          ref = this.fraction;
          results = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            digit = ref[j];
            results.push(this.charmap[digit]);
          }
          return results;
        }).call(this)).join('');
      }
      return res;
    };

    return AnybaseDigits;

  })();

  anybase = function(number, fromBase, toBase, charmap, precision) {
    var source;
    if (fromBase == null) {
      fromBase = 10;
    }
    if (toBase == null) {
      toBase = 10;
    }
    if (charmap == null) {
      charmap = defaultMap;
    }
    if (precision == null) {
      precision = 20;
    }
    if (charmap === true) {
      charmap = null;
    }
    source = new AnybaseDigits(fromBase, number, charmap);
    return source.compile(toBase, precision).output();
  };

  if (typeof module !== 'undefined') {
    module.exports = anybase;
  }

  if (typeof window !== 'undefined') {
    window.anybase = anybase;
  }

}).call(this);
