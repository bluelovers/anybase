#!/usr/bin/env node

// Generated by CoffeeScript 1.9.3
(function() {
  var anybase, arg, charmap, digit, error, fromBase, i, len, number, plainArgs, precision, ref, toBase;

  anybase = require('./anybase');

  if (~process.argv.indexOf('-h') || ~process.argv.indexOf('--help') || process.argv.length < 4) {
    console.log("\nUsage:\n  anybase number fromBase toBase [options]\n\nExamples:\n  # anybase 9f 16 10\n  => 159\n  # anybase [9,15] 16 10\n  => 159\n\nArguments:\n  number    charmap-based representation (example: F0), or comma-separated\n            array of decimal values of each digits (example: [15,0])\n  fromBase  numeric base of the original number\n  toBase    conversion target numeric base\n\nOptions:\n  --charmap=UTF_STRING -cSTR  custom map to represent digits, default:\n                              0..9 a..z A..Z α..ω (for base <= 87)\n                              '-', '.', ',' and ' ' are not allowed\n  --no-charmap         -n     no charmaps (array-style input/output)\n  --precision=N        -pN    max fractional digits in output\n  --help               -h     this help message\n  --version            -v     version info\n");
    return;
  }

  if (~process.argv.indexOf('-v') || ~process.argv.indexOf('--version')) {
    console.log(require('../package.json').version);
    return;
  }

  precision = null;

  charmap = null;

  plainArgs = [];

  ref = process.argv.slice(2);
  for (i = 0, len = ref.length; i < len; i++) {
    arg = ref[i];
    if (arg[0] === '-') {
      if (arg === '-n' || arg === '--no-charmap') {
        charmap = true;
      } else if (arg.substr(0, 2) === '-c') {
        charmap = arg.substr(2);
      } else if (arg.substr(0, 10) === '--charmap=') {
        charmap = arg.substr(10);
      } else if (arg.substr(0, 2) === '-p') {
        precision = arg.substr(2);
      } else if (arg.substr(0, 12) === '--precision=') {
        precision = arg.substr(12);
      }
    } else {
      plainArgs.push(arg);
    }
  }

  number = plainArgs[0], fromBase = plainArgs[1], toBase = plainArgs[2];

  number = number.trim();

  if (number[0] === '[') {
    number = number.substr(1, number.length - 1);
    number = (function() {
      var j, len1, ref1, results;
      ref1 = number.split(',');
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        digit = ref1[j];
        results.push(Number(digit.trim()));
      }
      return results;
    })();
  }

  fromBase = Number(fromBase.trim() || 10);

  toBase = Number(toBase.trim() || 10);

  try {
    console.log(anybase(number, fromBase, toBase, charmap, precision));
  } catch (_error) {
    error = _error;
    console.error(String(error));
    process.exit(1);
  }

}).call(this);
